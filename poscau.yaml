# All causets are transitively reduced.
# We try to provide the cannonical labeling for each causet.
# Note that cannonical labeling based on links will likely be different from
# canonical labeling based on relations!  I choose the former for now, even
# though that is a non-standard choice. 5jul023

# Design decisions: (goal: max simplicity given flexibility)
# * just n for 'global var'
# * preceding doc for keyword defns
# * one doc for all causets
# * allow list for causet, and l: [list]

l: list representation (to add fields)
nm: name
a: adjacency matrix
sbs: state of binary storage
ps: list of parents
aut: automorphisms (null for trivial?)
n: |
  so that incomplete stages do not have to end?
  But these stages will never complete anyway!!
# Do I want to store alternate labelings?
---
# OEIS counts oeis.org/A000112 :
[1,1,2,5,16,63,318,2045,16999,183231,2567284,
 46749427,1104891746,33823827452,1338193159771,
 68275077901156,4483130665195087]
---
# Causet abbreviations:
# It looks like yaml will throw an exception if keys are not unique:
# stackoverflow.com/questions/47668308/duplicate-key-in-yaml-configuaration-file
1ch: 1-chain
2ch: 2-chain
2ach: 2-antichain
3ch: 3-chain
# L: L # == 21
Lam: Lambda
3ach: 3-antichain
4ch: 4-chain
dia: diamond
flo: flower
# pi: pi # == 22
# L1: L1 # == 211
bt: bowtie
Lam1: Lambda1
iflo: iflower
4ach: 4-antichain
5ch: 5-chain
Yp: Y-prime
nup: nu-prime
scep: sceptre
tf: tallflower
Yt: Y-toe
Ln: L-nugget # This is a standard counter-example
flop: flower-prime
inup: inu-prime
diap: diamond-prime
flo1: flower1
floh: flower-hat
ker3: kernel3
dia1: diamond1

inup1: inu-prime1
inup2: inu-prime2
tNcl: tallNcowlick
iscep: isceptre
Vbt: Vbowtie
floft: flower-foot
st: sawtooth
diac: diamond-cap
inup: inu-prime
inuh: inu-hat # (what does hat mean specifically? 10jul023)
---
# list format: [abbrev, grr, sbs, parents, children]
# + ==> incomplete list
# Do I want to include the weight in both directions?  Seems so.
# include automorphisms?  natural labelings?
- 0
- [void, null, tcr, null, [1ch]]
- 1
- [1ch, null, tcr, [void], [2ch,2ach]]
- 2
- [2ch, 1, tcr, [1ch], [3ch,V,L]]
- [2ach, 0, tcr, [1ch], [[L,2],Lam,3ach]]
- 3
- [3ch, 5, tr, [2ch], [4ch,Y,nu,31]]
- [V, 3, tcr, [2ch], [[nu,2],flo,dia,V1]]
- [L, 1, tcr, [2ch, [2ach,2]], [31,V1,inu,pi,N,L1]]
- [Lam, 6, tcr, [2ach], [[N,2],bt,iY,Lam1]]
- [3ach, 0, tcr, [2ach], [[L1,3],[Lam1,3],iflo,4ach]]
- 4
- [4ch, 0b100101, tr, [3ch], [5ch,tallY,Yp,nup,41]]
- [Y, 0b010101, tr, [3ch], [[Yp,2],scep,tf,Yt,Y1]]
# flesh out stage 4 below before attempting to populate children lists
- [nu, 0b010011, tr, [3ch, [V,2]]]
- [31, 0b000101, tr, [3ch, L]]
- [dia, 0b110011, tr, [V]]
- [flo, 0b001011, tcr, [V]]
- [V1, 0b000011, tcr, [V, L]]
- [inu, 0b101100, tr, [L]]
- [pi, 0b001100, tcr, [L], [221]]
- [L1, 1, tcr, [L, [3ach,3]], [L1]]
- [iY, 0b100110, tr, [Lam]]
- [N, 0b001110, tcr, [[Lam,2], L]]
- [bt, 0b011110, tcr, [Lam]]
- [Lam1, 6, tcr, [Lam, [3ach, 3]]]
- [iflo, 0b111000, tcr, [3ach]]
- [4ach, 0, tcr, [3ach]]
- 5
- [5ch,   0b1000100101, tr, [4ch]]
- [tallY, 0b0100100101, tr, [4ch]]
- [Yp,    0b0010100101, tr, [4ch, [Y,2]]]
- [nup,   0b0001100101, tr, [4ch, nu]]
- [41,    0b0000100101, tr, [4ch, 31]]
- [scep,  0b1100010101, tr, [Y]]
- [tf,    0b0010010101, tr, [Y]]
- [Yt,    0b0001010101, tr, [Y, nu]]
- [Y1,    0b0000010101, tr, [Y, 31]]
- [Ln,    0b1100001101, tr, [nu]]
- [goal,  0b0010100011, tr, [nu]]
- [flop,  0b0001001101, tr, [nu, flo]]
- [nu1,   0b0000001101, tr, [nu,[V1,2],31]]
- [inup,  0b1001100100, tr, [31]]
- [h,     0b0010110001, tr, [31, inu]]
- [Np,    0b0010101001, tr, [31, N]]
- [32,    0b0001100100, tr, [31, [pi,2]]]
- [diap,  0b0010110011, tr, [dia, nu]]
- [flo1,  0b0000001011, tcr, [flo, V1]]
- [bush,  0b0001001011, tcr, [flo]]
- [floh,  0b0001110011, tr, [[flo,3], dia]]
- [ker3,  0b1110001011, tr, [flo]]
- [dia1,  0b0000110011, tr, [dia, V1]]
- [iscep, 0b1000110011, tr, [dia]]
- [Vbt,   0b0110110011, tr, [dia]]
- [V11,   0b0000000011, tcr, [V1, L1]]
- [V2,    0b0001001100, tcr, [V1, [pi,2]]]
- [floft, 0b0001001110, tcr, [V1, N]]
- [st,    0b0001110010, tr, [[V1,2], inu]]
- [diac,  0b1101010100, tr, [V1]]
- [311,   0b0000000101, tr, [31,L1]]
- [inu1,  0b0000101100, tr, [inu, [L1,2]]]
- [inup,  0b0001101100, tr, [inu, [pi,2]]]
- [inuh,  0b1000101100, tr, [inu]]

# path to spiral-crown (KJK)
- [221, 0b0000001100, tcr, [L1, pi], [222,+]]
- 6
- [222, 0b000010010100000, tcr, [221], [[inup2,3],+]]
- 7
- [inup2, 0b000001000101010100000, tr, [222, inup1, inu2], [tNcl,+]]
- 8
- [tNcl,  0b0000001000101100101000000100, tr, [inup2, +]]

# royal adjective vs crown noun - same num letters
# spiral vs twist (image search them)